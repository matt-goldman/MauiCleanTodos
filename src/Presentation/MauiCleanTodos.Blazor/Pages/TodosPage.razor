@inject ITodoListsService todoListService
@inject ITodoItemsService todoItemService

@page "/todos"
@using System.Collections.ObjectModel;

<div class="container">
    <div class="row mx-auto h-100">
        <div class="col">
            <div class="todo-card">
                <div class="todo-list-button-list">
                    @if (hasTodos)
                    {
                         @foreach (var list in todoLists)
                        {
                            <button class="list-button mx-auto align-middle" style="background-color:@list.Colour">@list.Title</button>
                        }
                    }
                </div>
                <div class="add-button-container">
                    <button class="add-button mx-auto align-middle">+ Add Todo List</button>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="todo-card">
                <div class="todo-list-button-list">

                </div>
                <div class="add-button-container">
                    <button class="add-button mx-auto align-middle">+ Add Todo Item</button>
                </div>
            </div>
        </div>
        <div class="col">
            
        </div>
    </div>
</div>


@code {
    private ObservableCollection<TodoListDto> todoLists = new();

    private bool hasTodos = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                var lists = await todoListService.GetTodos();
                AddTodoLists(lists);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private void AddTodoLists(List<TodoListDto> lists)
    {
        foreach (var list in lists)
        {
            todoLists.Add(list);
        }

        hasTodos = true;
        StateHasChanged();
    }

}
